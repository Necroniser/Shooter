<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

//Local
player = -1;
score = 0;
TextAlpha = 1;
AlphaChange = 0;
DisplayingRound = false;
Changing = true;
cursor_sprite = Spr_Crosshair;
window_set_cursor(cr_none);


//Global
global.Round = 0;
global.Roundstart = true;
global.TotalKills = 0;
global.BasicKills = 0;
global.FastKills = 0;
global.ToughKills = 0;
global.DamageDealt = 0;
global.DamageReceived = 0;
global.TotalShots = 0;
global.TotalHits = 0;

fnSpawnScheduleInit();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !(instance_exists(Obj_ZombieBasic)) &amp;&amp; !(instance_exists(Obj_ZombieFast)) &amp;&amp; !(instance_exists(Obj_ZombieTough)) &amp;&amp; (global.Roundstart == false) &amp;&amp; (Obj_EnemyControl.Zombiecount = 0)
{
    global.Roundstart = true;
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing Display



//HUD Backings
draw_sprite(Spr_HUDHealthBarBacking,0,view_xview[0]+8,view_yview[0]+view_hview[0]-16);
draw_sprite(Spr_HUDAmmoBacking,0,view_xview[0],view_yview[0]);
draw_sprite(Spr_HUDScoreBacking,0,view_xview[0] + view_wview[0] ,view_yview[0]);
draw_sprite(Spr_HUDHealthBarBacking,0,view_xview[0]+44,view_yview[0]+view_hview[0]-16);



//Health Bar
hp = obj_player.hp;
if hp &gt; 40
{draw_set_colour(c_green);}
else
{draw_set_colour(c_red);};
draw_rectangle(view_xview[0]+12,view_yview+view_hview[0]-20,view_xview[0]+26,view_yview[0]+view_hview[0]-20-hp,false);
draw_set_colour(c_black);



//Stamina Bar
stamina = obj_player.stamina div 2
draw_set_colour(c_blue);
draw_rectangle(view_xview[0] + 48, view_yview[0]+view_hview[0]-20,view_xview[0]+62,view_yview[0]+view_hview[0]-20-stamina,false);



//Score
draw_set_font(Fnt_Base);
draw_set_colour(c_black);
draw_text(view_xview[0]+view_wview[0]-120,view_yview[0]+6,"Score: "+string(score));



//Round
if (global.Roundstart == true) // Start Displaying
{
    TextAlpha = 1;
    AlphaChange = 0;
    Changing = true;
    DisplayingRound = false;
};

if (DisplayingRound == false) &amp;&amp; (global.Round != 0)// Normal Display Position
{
draw_set_alpha(TextAlpha);
draw_set_font(Fnt_Base);
draw_set_colour(c_white);
draw_text(view_xview[0]+(view_wview[0]/2)-40,view_yview[0]+6,"Round: " + string(global.Round));
draw_set_alpha(1);
draw_set_halign(fa_left);
};

if (DisplayingRound == true) // Large Display Position
{
    //Drawing Text
    draw_set_font(Fnt_LargeBase);
    draw_set_colour(c_maroon);
    draw_set_alpha(TextAlpha);
    draw_set_halign(fa_center);
    draw_text(view_xview[0]+(view_wview[0]/2),view_yview[0]+(view_hview[0]/3),"Round: " + string(global.Round));
    draw_set_alpha(1);
    draw_set_font(Fnt_Base);
    draw_set_colour(c_white);
    draw_set_halign(fa_left);
};

    //Changing Direction Triggers
if (TextAlpha == 0) &amp;&amp; (Changing == true) &amp;&amp; (AlphaChange == 0) &amp;&amp; (DisplayingRound == false)// Normal alpha minimizes and Large Starts
{
    Changing = false;
    AlphaChange = 1;
    DisplayingRound = true;
    global.Round += 1;
    TextAlpha += .01;
};
if (TextAlpha &gt; .99) &amp;&amp; (Changing == false) &amp;&amp; (AlphaChange == 1) &amp;&amp; (DisplayingRound == true) // Large Alpha maxes out
{
    AlphaChange = 0;
};
if (TextAlpha = 0) &amp;&amp; (Changing == false) &amp;&amp; (AlphaChange == 0) &amp;&amp; (DisplayingRound == true) // Large Alpha triggers to Normal Alpha
{
    AlphaChange = 1;
    DisplayingRound = false;  
};

    //Changing TextAlpha
if (AlphaChange == 0) &amp;&amp; (TextAlpha &gt; .01)
{
    TextAlpha -= 0.01;
};
if (AlphaChange == 0) &amp;&amp; (TextAlpha &lt;= .01)
{
    TextAlpha = 0;
};
if (AlphaChange == 1) &amp;&amp; (TextAlpha &lt; 1)
{
    TextAlpha += 0.01;
};



//Ammo
if (player != -1) {
    switch(player.current_weapon)
    {
    case  1: ammotype = player.totalPistol_ammo; break;
    case  2: ammotype = player.totalSMG_ammo; break;
    case  3: ammotype = player.totalRifle_ammo; break;
    case  4: ammotype = player.totalShotgun_ammo; break;
    case  5: ammotype = player.totalVector_ammo; break;
    };
    draw_set_font(Fnt_Base);
    draw_set_colour(c_white);
    draw_text(view_xview+6, view_yview+4, "Ammo: " + string(player.current_ammo)); //+ "/" + string(player.weapon.magazine_size));
    draw_set_colour(c_black);
    draw_text(view_xview + 6, view_yview + 24, string(ammotype));
};
//Music Player
if !(audio_is_playing(Mus_Horror)) &amp;&amp; !(audio_is_playing(Mus_Horror2)) &amp;&amp; !(audio_is_playing(Mus_Horror3)) &amp;&amp; !(audio_is_playing(Mus_Horror4)) &amp;&amp; !(audio_is_playing(Mus_Horror5)) &amp;&amp; !(audio_is_playing(Mus_Horror6))
{
randomize();
song = choose(Mus_Horror,Mus_Horror2,Mus_Horror3,Mus_Horror4,Mus_Horror5,Mus_Horror6);
audio_play_sound(song,1,false);
global.LastMusic = song
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
