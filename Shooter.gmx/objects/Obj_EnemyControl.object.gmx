<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Starting Timer for Spawning
totalspawnpoints = instance_number(Obj_Spawnpoint);
//Variables
ZombieToughChance = 10;
ZombieFastChance = 20+ZombieToughChance;
ZombieType = Obj_ZombieBasic;
Zombiecount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

//Chosing Spawnpoint
spawnpointnumber = round(random_range(1,totalspawnpoints));
chosenspawnpoint = instance_find(Obj_Spawnpoint,spawnpointnumber);

//Determining Which Type of Zombie to spawn
chance = round(random_range(1,ZombieFastChance+70));
if (chance&lt;ZombieToughChance)
{
Zombietype = Obj_ZombieTough;
}
else
if (chance&lt;ZombieFastChance &amp;&amp; chance&gt;ZombieToughChance)
{
Zombietype = Obj_ZombieFast;
}
else
{
Zombietype = Obj_ZombieBasic;
};

//Spawning the Zombie
with (chosenspawnpoint)
{
    inst = instance_create(x,y,Obj_EnemyControl.Zombietype);
    Obj_EnemyControl.Zombiecount-=1;
};

//Resetting Spawn Timer
if (Zombiecount &gt;= 1)
{
alarm[0] = (room_speed*5/((global.Round+1)/2));
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.Roundstart == true)
{
    Zombiecount = (global.Round)+6;
    global.Roundstart = false;
};

if (Zombiecount &gt;= 1) &amp;&amp; (alarm[0]==-1)
{
    alarm[0] = 10*room_speed;
    ZombieToughChance = 2*global.Round;
    ZombieToughChance = clamp(ZombieToughChance,1,40);
    ZombieFastChance = 4*global.Round;
    ZombieFastChance = clamp(ZombieFastChance,ZombieToughChance,60);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
